为了解决排班儿的事，我们首先要考虑以下问题：

1.首先，排班是随机部门，然后随机挑选的部门里再随机挑选出一个人。

2.随机出来的人，排完了班，就不能再让他值班了。

3.部门也好，分类也罢，强烈建议按类别写到不同的txt文档里！否则当添加或删去某个成员，整个程序都要因为人数问题而一个一个去改变量！！


我的代码里最主要的三个工具：FileReader类，Random类。ArrayList集合类。

一个一个说：
	
1	FileReader类，不必多说。IO流，字符流读取操作肯定要用。
	
	这里稍微说一下，txt文档另存为的时候，可以在下方看到，是ANSI编码。

	Java的FileReader类默认是UTF-8编码格式，txt文件保存的时候要注意也保存成UTF-8的格式，要不然FileReader类读取的时候是一团乱码。

3	ArrayList集合类。为什么不去用String[]类型的数组呢？最大的问题：String[] 类数组太麻烦了。
	
	当我要去从随机名单里找一个人出来，我还要单独的for循环进行便利。

	最最最最最重要的是！它是动态数组，长度随时可以伸缩。add一个就变长，remove一个就变短。

	每个部门人数多少不一，显然不能再用传统的String[]数组把长度定死，很不明智。

	ArrayList的优点就是自带indexOf()方法（检索某个对象是否在这个ArrayList里头出现过）以及get(int 角标)方法。

	好了，现在我只要随机数一个角标出来，使用get方法就可以从集合类里直接拿到一个人名。好了，现在说说怎么个随机办法。


3	Random类。我们可能想到的是Math.random()方法。实际上，Java里是有Random类的，并且要好用的多。

	首先实例化一个对象Random rand=new Random();

	rand.nextInt(x)    ←这个x代表java会替你生成0到x-1（取0不取x，正好与角标相对应）之间的int整形数

	就没有必要自己再去用Math.Random方法苦苦的去写表达式了。

	并且每个部门人数不尽相同。我们当然不会一个部门去写一个自定义random方法。

因为我比较懒..刚去听了个讲座回来，图省事把所有的方法都写在了一个类里（这么干其实跟面向过程差不多）

小伙伴们平时写的时候要尽量多建立class来降低代码之间的耦合程度哈~

这个程序最核心的过程：
		先不要暴力枚举，如何做到每1个班次该抽什么部门，部门里随机抽1个人才是咱们最应该仔细思考的地方。

		把这些东西全写在main方法里就太过冗杂了。我因此把它们提取出来，形成了自定义getOne方法。

		getOne方法里就有一个临时ArrayList（这个集合类叫LuckyGuys，被抽到的人运气还算不错哈~）

		它是干什么用的？我首先要随机选一个幸运部门。这个临时ArrayList用来存放这个幸运部门的所有成员 。

		我现在再用random()方法，再挑出来其中一个幸运成员，这个临时ArrayList就可以扔掉了。（当然，下一次函数还会用的~）

这些问题搞定了，这个程序也就基本搞定一半了。还有一个非常严肃的问题！！！如果某个人极其幸运，很多次都被安排值班了怎么办？

因此还需要一个全局的ArrayList!!，我起的名叫Ifrepeat，看名就知道，这相当于一个点名册，如果某个人已经被安排值班了，我就把他的名字记在这个账本上。

以后每次再揪人的时候，先翻翻账本看这个人有没有出过值班了。如果点名册里有，那就赦免他，我去找下一个人。如果点名册没他的记录，那不好意思，安排上了。

//→我是用for循环写的这部分，所以遇到了这种发现这个人已经被安排过的情况，把自增的那个变量减去1，表示本次循环作废，尝试去寻找下一个没出过勤的人，直接continue。（如果这行字比较费解，去翻翻我代码，应该会懂什么意思。）

现在，这个主体部分已经完善了，剩下的无非就是值x天班，每天y个班次，这无非就是两层for循环的事，不难理解。

***最后，还有一个实际问题我刻意回避了，我没有具体算整体有多少人，再去根据多少人考虑一天几个班每个班多少人（我又不是人力资源部的,只是拿来做个试验而已.....但是思路大同小异）。因此没有去考虑一定要把所有人都安排到值班，只是保证随机抽取，并且保证每个人值班不超过一次。






